{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["button","subInput","result","links","renderList","_callee","json","accessToken","element","index","regenerator_default","a","wrap","_context","prev","next","data","link_history","length","t0","concat","title","link","fecthClicks","t1","sent","call","abrupt","join","stop","this","_callee2","URL","fetchResult","response","jsonData","linkData","clicks","_context2","fetch","method","cache","mode","ok","link_clicks","JSON","stringify","innerHTML","disabled","_callee3","_context3","Request","status","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","react_default","createElement","align","type","placeholder","id","href","document","querySelector","addEventListener","value","test","fetchLinks","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c1b4960.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: [], disabled: false };\n  }\n\n  render() {\n    return (\n      <div align='center'>\n        <h1>Get your bit.ly links' clicks count</h1>\n        <input type=\"text\" placeholder=\"Enter bit.ly access token\" />\n        <button disabled={this.state.disabled}>Get links clicks count</button>\n        <div align='left' id=\"result\"></div>\n        <div>Dont have bit.ly access token?</div>\n        <div>Get it <a href=\"https://bitly.com/a/oauth_apps\">here</a></div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    loadComponents();\n  }\n}\nlet button, subInput, result, links;\nfunction loadComponents() {\n  button = document.querySelector('button');\n  subInput = document.querySelector('input');\n  result = document.querySelector('#result');\n\n  button.addEventListener('click', () => {\n\n    const accessToken = subInput.value\n    if (/^[A-Za-z0-9]+$/.test(accessToken)) {\n      button.disabled = true;\n      fetchLinks(accessToken);\n    }\n  });\n}\nasync function renderList(json, accessToken) {\n  links = json.data.link_history;\n  let element = []\n  for (let index = 0; index < links.length; index++) {\n    element[index] = `<li>Title: ${links[index].title}, Link: <a href=\"${links[index].link}\">${links[index].link}</a>, Clicks: ${await (fecthClicks(links[index].link, accessToken))}</li>`;\n  }\n  return `<ol>\n    ${element.join(\"\")}\n  </ol>`;\n\n}\nasync function fecthClicks(link, accessToken) {\n  const URL = `https://api-ssl.bitly.com/v3/link/clicks?access_token=${accessToken}&format=json&limit=100&link=${link}`\n  try {\n    const fetchResult = fetch(URL, { method: 'GET', cache: 'reload', mode: 'cors' });\n    const response = await fetchResult;\n    if (response.ok) {\n      const jsonData = await response.json();\n      const linkData = await jsonData.data;\n      const clicks = await linkData.link_clicks;\n      return JSON.stringify(clicks);\n    } else {\n      return \"N/A\"\n    }\n  } catch (e) {\n    result.innerHTML = e;\n    button.disabled = false;\n  }\n}\n\nasync function fetchLinks(accessToken) {\n  result.innerHTML = `Gathering Data... </br> Please wait.`;\n  const URL = `https://api-ssl.bitly.com/v3/user/link_history?access_token=${accessToken}&format=json&limit=100`;\n  try {\n    const fetchResult = fetch(new Request(URL, { method: 'GET', cache: 'reload' }), { mode: 'cors' });\n    const response = await fetchResult;\n    if (response.ok) {\n      const jsonData = await response.json();\n      result.innerHTML = await renderList(jsonData, accessToken);\n      button.disabled = false;\n    } else {\n      result.innerHTML = `Response.status: ${response.status}`;\n      button.disabled = false;\n    }\n  } catch (e) {\n    result.innerHTML = e;\n    button.disabled = false;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}